{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport fetch from 'isomorphic-unfetch';\nimport { GET_POSTS } from '../../types';\nexport var getPosts = function getPosts() {\n  return function _callee(dispatch, getState) {\n    var state, res;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            state = getState();\n\n            if (!state.posts.data) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 3:\n            dispatch({\n              type: \"\".concat(GET_POSTS, \"_started\")\n            });\n            _context.prev = 4;\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(fetch('https://api.github.com/repos/zeit/next.js'));\n\n          case 7:\n            res = _context.sent;\n            _context.next = 10;\n            return _regeneratorRuntime.awrap(res.json());\n\n          case 10:\n            res = _context.sent;\n            dispatch({\n              type: \"\".concat(GET_POSTS, \"_success\"),\n              payload: res\n            });\n            _context.next = 17;\n            break;\n\n          case 14:\n            _context.prev = 14;\n            _context.t0 = _context[\"catch\"](4);\n            dispatch({\n              type: \"\".concat(GET_POSTS, \"_failed\"),\n              payload: _context.t0\n            });\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[4, 14]]);\n  };\n};","map":{"version":3,"sources":["/Users/abhijit/Documents/Projects/React/ssr_next_js/redux/actions/posts/index.js"],"names":["fetch","GET_POSTS","getPosts","dispatch","getState","state","posts","data","type","res","json","payload"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AAEA,SAASC,SAAT,QAA0B,aAA1B;AAGA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA,SAAM,iBAAOC,QAAP,EAAiBC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AACtBC,YAAAA,KADsB,GACdD,QAAQ,EADM;;AAAA,iBAEzBC,KAAK,CAACC,KAAN,CAAYC,IAFa;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAK5BJ,YAAAA,QAAQ,CAAC;AAACK,cAAAA,IAAI,YAAIP,SAAJ;AAAL,aAAD,CAAR;AAL4B;AAAA;AAAA,6CAOVD,KAAK,CAAC,2CAAD,CAPK;;AAAA;AAOtBS,YAAAA,GAPsB;AAAA;AAAA,6CAQdA,GAAG,CAACC,IAAJ,EARc;;AAAA;AAQ1BD,YAAAA,GAR0B;AAS1BN,YAAAA,QAAQ,CAAC;AAACK,cAAAA,IAAI,YAAIP,SAAJ,aAAL;AAA8BU,cAAAA,OAAO,EAAEF;AAAvC,aAAD,CAAR;AAT0B;AAAA;;AAAA;AAAA;AAAA;AAW1BN,YAAAA,QAAQ,CAAC;AAACK,cAAAA,IAAI,YAAIP,SAAJ,YAAL;AAA6BU,cAAAA,OAAO;AAApC,aAAD,CAAR;;AAX0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAN;AAAA,CAAjB","sourcesContent":["import fetch from 'isomorphic-unfetch';\n\nimport { GET_POSTS } from '../../types';\n\n\nexport const getPosts = () => async (dispatch, getState)=>{\n  const state = getState();\n  if(state.posts.data){\n    return;\n  }\n  dispatch({type:`${GET_POSTS}_started`});\n  try{\n    let res = await fetch('https://api.github.com/repos/zeit/next.js');\n    res = await res.json();\n    dispatch({type:`${GET_POSTS}_success`, payload: res});\n  }catch(err){\n    dispatch({type:`${GET_POSTS}_failed`, payload: err});\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}