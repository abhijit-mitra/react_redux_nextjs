{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport fetch from 'isomorphic-unfetch';\nimport { GET_POSTS } from '../../types';\nexport var getPosts = function getPosts() {\n  return function (dispatch, getState) {\n    var state = getState();\n\n    if (state.posts.data) {\n      return;\n    }\n\n    var callApi = function callApi() {\n      var res;\n      return _regeneratorRuntime.async(function callApi$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(fetch('https://api.github.com/repos/zeit/next.js'));\n\n            case 3:\n              res = _context.sent;\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(res.json());\n\n            case 6:\n              res = _context.sent;\n              dispatch({\n                type: \"\".concat(GET_POSTS, \"_success\"),\n                payload: res\n              });\n              _context.next = 13;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](0);\n              dispatch({\n                type: \"\".concat(GET_POSTS, \"_failed\"),\n                payload: _context.t0\n              });\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 10]]);\n    };\n\n    dispatch({\n      type: \"\".concat(GET_POSTS, \"_started\")\n    });\n    return _Promise.resolve(callApi());\n  };\n};","map":{"version":3,"sources":["/Users/abhijit/Documents/Projects/React/ssr_next_js/redux/actions/posts/index.js"],"names":["fetch","GET_POSTS","getPosts","dispatch","getState","state","posts","data","callApi","res","json","type","payload","resolve"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AAEA,SAASC,SAAT,QAA0B,aAA1B;AAGA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA,SAAM,UAACC,QAAD,EAAWC,QAAX,EAAsB;AAClD,QAAMC,KAAK,GAAGD,QAAQ,EAAtB;;AACA,QAAGC,KAAK,CAACC,KAAN,CAAYC,IAAf,EAAoB;AAClB;AACD;;AACD,QAAMC,OAAO,GAAG,SAAVA,OAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAEIR,KAAK,CAAC,2CAAD,CAFT;;AAAA;AAERS,cAAAA,GAFQ;AAAA;AAAA,+CAGAA,GAAG,CAACC,IAAJ,EAHA;;AAAA;AAGZD,cAAAA,GAHY;AAIZN,cAAAA,QAAQ,CAAC;AAACQ,gBAAAA,IAAI,YAAIV,SAAJ,aAAL;AAA8BW,gBAAAA,OAAO,EAAEH;AAAvC,eAAD,CAAR;AAJY;AAAA;;AAAA;AAAA;AAAA;AAMZN,cAAAA,QAAQ,CAAC;AAACQ,gBAAAA,IAAI,YAAIV,SAAJ,YAAL;AAA6BW,gBAAAA,OAAO;AAApC,eAAD,CAAR;;AANY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAhB;;AAUAT,IAAAA,QAAQ,CAAC;AAACQ,MAAAA,IAAI,YAAIV,SAAJ;AAAL,KAAD,CAAR;AACA,WAAO,SAAQY,OAAR,CAAgBL,OAAO,EAAvB,CAAP;AAED,GAlBuB;AAAA,CAAjB","sourcesContent":["import fetch from 'isomorphic-unfetch';\n\nimport { GET_POSTS } from '../../types';\n\n\nexport const getPosts = () => (dispatch, getState)=>{\n  const state = getState();\n  if(state.posts.data){\n    return;\n  }\n  const callApi = async () =>{\n    try{\n      let res = await fetch('https://api.github.com/repos/zeit/next.js');\n      res = await res.json();\n      dispatch({type:`${GET_POSTS}_success`, payload: res});\n    }catch(err){\n      dispatch({type:`${GET_POSTS}_failed`, payload: err});\n    }\n  }\n\n  dispatch({type:`${GET_POSTS}_started`});\n  return Promise.resolve(callApi());\n\n}\n"]},"metadata":{},"sourceType":"module"}