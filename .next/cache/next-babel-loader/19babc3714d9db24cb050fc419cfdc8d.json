{"ast":null,"code":"import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport reducers from './reducers';\nexport const initStore = (initialState = {}) => {\n  return createStore(reducers, initialState, applyMiddleware(thunk));\n};\nconst isDev = true; // const { composeWithDevTools } = isDev ? require('redux-devtools-extension') : require('redux-devtools-extension/logOnlyInProduction');\n\nconst composeEnhancers = global.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconsole.log('rrrrrr', global.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__);\nexport default ((initialState = {}) => {\n  const middlewares = isDev ? [thunk, createLogger()] : [thunk];\n  return createStore(reducers, initialState, composeEnhancers(applyMiddleware(...middlewares)));\n});","map":{"version":3,"sources":["/Users/abhijit/Documents/Projects/React/ssr_next_js/redux/index.js"],"names":["createStore","applyMiddleware","compose","thunk","createLogger","reducers","initStore","initialState","isDev","composeEnhancers","global","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","console","log","middlewares"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,OAAOC,QAAP,MAAqB,YAArB;AAGA,OAAO,MAAMC,SAAS,GAAG,CAACC,YAAY,GAAG,EAAhB,KAAuB;AAC9C,SAAOP,WAAW,CAACK,QAAD,EAAWE,YAAX,EAAyBN,eAAe,CAACE,KAAD,CAAxC,CAAlB;AACD,CAFM;AAIP,MAAMK,KAAK,OAAX,C,CAEA;;AAEA,MAAMC,gBAAgB,GAAGC,MAAM,CAACC,oCAAP,IAA+CT,OAAxE;AACAU,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBH,MAAM,CAACC,oCAA7B;AAEA,gBAAe,CAACJ,YAAY,GAAC,EAAd,KAAqB;AAClC,QAAMO,WAAW,GAAGN,KAAK,GAAG,CAACL,KAAD,EAAQC,YAAY,EAApB,CAAH,GAA6B,CAACD,KAAD,CAAtD;AACA,SAAOH,WAAW,CAACK,QAAD,EAAWE,YAAX,EAAyBE,gBAAgB,CAACR,eAAe,CAAC,GAAGa,WAAJ,CAAhB,CAAzC,CAAlB;AACD,CAHD","sourcesContent":["import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport reducers from './reducers';\n\n\nexport const initStore = (initialState = {}) => {\n  return createStore(reducers, initialState, applyMiddleware(thunk));\n};\n\nconst isDev = process.env.NODE_ENV !== 'production';\n\n// const { composeWithDevTools } = isDev ? require('redux-devtools-extension') : require('redux-devtools-extension/logOnlyInProduction');\n\nconst composeEnhancers = global.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconsole.log('rrrrrr', global.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__);\n\nexport default (initialState={}) => {\n  const middlewares = isDev ? [thunk, createLogger()] : [thunk];\n  return createStore(reducers, initialState, composeEnhancers(applyMiddleware(...middlewares)));\n};\n"]},"metadata":{},"sourceType":"module"}