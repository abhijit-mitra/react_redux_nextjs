{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Router, { useRouter } from 'next/router';\nimport { useState, useEffect } from 'react';\nconst initialState = {\n  data: null,\n  error: null,\n  isFetching: false\n};\n\nconst getComments = async (state, setState) => {\n  const data = await getData();\n  setState(_objectSpread({}, state, {\n    isFetching: false,\n    data\n  }));\n};\n\nexport const Comments = () => {\n  const {\n    query\n  } = useRouter();\n  const {\n    0: state,\n    1: setState\n  } = useState(initialState);\n  useEffect(() => {\n    setState(_objectSpread({}, state, {\n      isFetching: true\n    }));\n    getComments(state, setState);\n  }, []);\n  return __jsx(\"div\", null, state.isFetching ? __jsx(\"h1\", null, \"Loading...\") : (state.data && state.data.comments || []).map((data, i) => __jsx(\"h2\", {\n    key: i,\n    onClick: () => Router.push('/posts/[postId]/comments/[commentId]', `/posts/${query.postId}/comments/${i + 1}`)\n  }, data)));\n};\n\nconst getData = () => new Promise((resolve, reject) => {\n  const data = {\n    comments: ['Hi', 'Hello', 'How r you?']\n  };\n  setTimeout(() => {\n    resolve(data);\n  }, 5000);\n});\n\nexport default Comments;","map":null,"metadata":{},"sourceType":"module"}