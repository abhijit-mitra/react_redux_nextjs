{"ast":null,"code":"import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport reducers from './reducers';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nexport const initStore = (initialState = {}) => {\n  return createStore(reducers, initialState, applyMiddleware(thunk));\n};\nconst isDev = true; // const { composeWithDevTools } = isDev ? require('redux-devtools-extension') : require('redux-devtools-extension/logOnlyInProduction');\n// const composeEnhancers = typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport default ((initialState = {}) => {\n  const middlewares = isDev ? [thunk, createLogger()] : [thunk];\n  return createStore(reducers, initialState, composeWithDevTools(applyMiddleware(...middlewares)));\n});","map":{"version":3,"sources":["/Users/abhijit/Documents/Projects/React/ssr_next_js/redux/index.js"],"names":["createStore","applyMiddleware","compose","thunk","createLogger","reducers","composeWithDevTools","initStore","initialState","isDev","middlewares"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAGA,OAAO,MAAMC,SAAS,GAAG,CAACC,YAAY,GAAG,EAAhB,KAAuB;AAC9C,SAAOR,WAAW,CAACK,QAAD,EAAWG,YAAX,EAAyBP,eAAe,CAACE,KAAD,CAAxC,CAAlB;AACD,CAFM;AAIP,MAAMM,KAAK,OAAX,C,CAEA;AAEA;;AAEA,gBAAe,CAACD,YAAY,GAAC,EAAd,KAAqB;AAClC,QAAME,WAAW,GAAGD,KAAK,GAAG,CAACN,KAAD,EAAQC,YAAY,EAApB,CAAH,GAA6B,CAACD,KAAD,CAAtD;AACA,SAAOH,WAAW,CAACK,QAAD,EAAWG,YAAX,EAAyBF,mBAAmB,CAACL,eAAe,CAAC,GAAGS,WAAJ,CAAhB,CAA5C,CAAlB;AACD,CAHD","sourcesContent":["import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport reducers from './reducers';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n\nexport const initStore = (initialState = {}) => {\n  return createStore(reducers, initialState, applyMiddleware(thunk));\n};\n\nconst isDev = process.env.NODE_ENV !== 'production';\n\n// const { composeWithDevTools } = isDev ? require('redux-devtools-extension') : require('redux-devtools-extension/logOnlyInProduction');\n\n// const composeEnhancers = typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport default (initialState={}) => {\n  const middlewares = isDev ? [thunk, createLogger()] : [thunk];\n  return createStore(reducers, initialState, composeWithDevTools(applyMiddleware(...middlewares)));\n};\n"]},"metadata":{},"sourceType":"module"}