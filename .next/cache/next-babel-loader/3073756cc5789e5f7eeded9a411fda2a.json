{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport reducers from './reducers';\nexport var initStore = function initStore() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return createStore(reducers, initialState, applyMiddleware(thunk));\n};\nvar isDev = true; // const { composeWithDevTools } = isDev ? require('redux-devtools-extension') : require('redux-devtools-extension/logOnlyInProduction');\n\nvar composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nexport default (function () {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var middlewares = isDev ? [thunk, createLogger()] : [thunk];\n  return createStore(reducers, initialState, composeEnhancers(applyMiddleware.apply(void 0, middlewares)));\n});","map":{"version":3,"sources":["/Users/abhijit/Documents/Projects/React/ssr_next_js/redux/index.js"],"names":["createStore","applyMiddleware","thunk","createLogger","reducers","initStore","initialState","isDev","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","middlewares"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,OAAOC,QAAP,MAAqB,YAArB;AAGA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAuB;AAAA,MAAtBC,YAAsB,uEAAP,EAAO;AAC9C,SAAON,WAAW,CAACI,QAAD,EAAWE,YAAX,EAAyBL,eAAe,CAACC,KAAD,CAAxC,CAAlB;AACD,CAFM;AAIP,IAAMK,KAAK,OAAX,C,CAEA;;AAEA,IAAMC,gBAAgB,GAAGC,MAAM,CAACC,oCAAP,IAA+CC,OAAxE;AAEA,gBAAe,YAAqB;AAAA,MAApBL,YAAoB,uEAAP,EAAO;AAClC,MAAMM,WAAW,GAAGL,KAAK,GAAG,CAACL,KAAD,EAAQC,YAAY,EAApB,CAAH,GAA6B,CAACD,KAAD,CAAtD;AACA,SAAOF,WAAW,CAACI,QAAD,EAAWE,YAAX,EAAyBE,gBAAgB,CAACP,eAAe,MAAf,SAAmBW,WAAnB,CAAD,CAAzC,CAAlB;AACD,CAHD","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport reducers from './reducers';\n\n\nexport const initStore = (initialState = {}) => {\n  return createStore(reducers, initialState, applyMiddleware(thunk));\n};\n\nconst isDev = process.env.NODE_ENV !== 'production';\n\n// const { composeWithDevTools } = isDev ? require('redux-devtools-extension') : require('redux-devtools-extension/logOnlyInProduction');\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport default (initialState={}) => {\n  const middlewares = isDev ? [thunk, createLogger()] : [thunk];\n  return createStore(reducers, initialState, composeEnhancers(applyMiddleware(...middlewares)));\n};\n"]},"metadata":{},"sourceType":"module"}