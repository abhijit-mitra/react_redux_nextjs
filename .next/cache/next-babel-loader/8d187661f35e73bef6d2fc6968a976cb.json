{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"/Users/abhijit/Documents/Projects/React/ssr_next_js/pages/posts/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n// import Link from 'next/link';\n//\n// const Posts = (props)=>(\n//   <h1>\n//     All Posts\n//     <Link href=\"/posts/[postId]\" as=\"/posts/1\">\n//       <a>Get Post Details</a>\n//     </Link>\n//   </h1>\n// )\n//\n// export default Posts;\nimport { memo, useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { getComments } from '../../redux/actions';\nvar Posts = memo(function (props) {\n  console.log(props);\n  useEffect(function () {\n    props.getComments();\n    console.log('useEffect executed');\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, \"Posts\"), __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, props.isFetching ? '...Loading' : props.data && props.data.size));\n});\n\nPosts.getInitialProps = function _callee(ctx) {\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          console.log('---ctx---', ctx.isServer);\n\n          if (!ctx.isServer) {\n            _context.next = 4;\n            break;\n          }\n\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(ctx.store.dispatch(getComments()));\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    comments: state.comments\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getComments: getComments\n})(Posts);","map":{"version":3,"sources":["/Users/abhijit/Documents/Projects/React/ssr_next_js/pages/posts/index.js"],"names":["memo","useEffect","useState","connect","getComments","Posts","props","console","log","isFetching","data","size","getInitialProps","ctx","isServer","store","dispatch","mapStateToProps","state","comments"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,SAAQA,IAAR,EAAcC,SAAd,EAAyBC,QAAzB,QAAwC,OAAxC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAAQC,WAAR,QAA0B,qBAA1B;AAEA,IAAMC,KAAK,GAAGL,IAAI,CAAC,UAACM,KAAD,EAAW;AAC5BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAL,EAAAA,SAAS,CAAC,YAAI;AACZK,IAAAA,KAAK,CAACF,WAAN;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACD,GAHQ,EAGP,EAHO,CAAT;AAIA,SACE,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKF,KAAK,CAACG,UAAN,GAAiB,YAAjB,GAA8BH,KAAK,CAACI,IAAN,IAAaJ,KAAK,CAACI,IAAN,CAAWC,IAA3D,CAFF,CADF;AAOD,CAbiB,CAAlB;;AAeAN,KAAK,CAACO,eAAN,GAAwB,iBAAeC,GAAf;AAAA;AAAA;AAAA;AAAA;AACtBN,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBK,GAAG,CAACC,QAA7B;;AADsB,eAEnBD,GAAG,CAACC,QAFe;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAGZD,GAAG,CAACE,KAAJ,CAAUC,QAAV,CAAmBZ,WAAW,EAA9B,CAHY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;;AAOA,IAAMa,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD;AAAA,SAAW;AACjCC,IAAAA,QAAQ,EAACD,KAAK,CAACC;AADkB,GAAX;AAAA,CAAxB;;AAIA,eAAehB,OAAO,CAACc,eAAD,EAAiB;AAACb,EAAAA,WAAW,EAAXA;AAAD,CAAjB,CAAP,CAAuCC,KAAvC,CAAf","sourcesContent":["// import Link from 'next/link';\n//\n// const Posts = (props)=>(\n//   <h1>\n//     All Posts\n//     <Link href=\"/posts/[postId]\" as=\"/posts/1\">\n//       <a>Get Post Details</a>\n//     </Link>\n//   </h1>\n// )\n//\n// export default Posts;\n\n\nimport {memo, useEffect, useState} from 'react';\nimport { connect } from 'react-redux';\n\nimport {getComments} from '../../redux/actions';\n\nconst Posts = memo((props) => {\n  console.log(props);\n  useEffect(()=>{\n    props.getComments();\n    console.log('useEffect executed');\n  },[])\n  return(\n    <>\n      <h1>Posts</h1>\n      <h1>{props.isFetching?'...Loading':props.data&& props.data.size}</h1>\n\n    </>\n  );\n});\n\nPosts.getInitialProps = async function(ctx) {\n  console.log('---ctx---', ctx.isServer);\n  if(ctx.isServer){\n      await ctx.store.dispatch(getComments());\n  }\n};\n\nconst mapStateToProps = (state) =>({\n  comments:state.comments\n})\n\nexport default connect(mapStateToProps,{getComments})(Posts);\n"]},"metadata":{},"sourceType":"module"}