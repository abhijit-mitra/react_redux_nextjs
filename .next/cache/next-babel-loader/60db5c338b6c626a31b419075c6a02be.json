{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { handleActions } from 'redux-actions';\nimport { GET_POSTS, GET_COMMENTS } from '../../types';\nimport { createReducer, baseReducer } from '../utils';\nvar initialState = {\n  posts: _objectSpread({}, baseReducer),\n  comments: _objectSpread({}, baseReducer)\n};\nvar getPosts = createReducer(GET_POSTS);\nvar getComments = createReducer(GET_COMMENTS);\nvar posts = handleActions(_objectSpread({}, getPosts, {}, getComments), initialState);\nexport default posts;","map":{"version":3,"sources":["/Users/abhijit/Documents/Projects/React/ssr_next_js/redux/reducers/posts/index.js"],"names":["handleActions","GET_POSTS","GET_COMMENTS","createReducer","baseReducer","initialState","posts","comments","getPosts","getComments"],"mappings":";;;;;;;;;;;;AAAA,SAASA,aAAT,QAA8B,eAA9B;AAEA,SAASC,SAAT,EAAoBC,YAApB,QAAwC,aAAxC;AACA,SAAQC,aAAR,EAAuBC,WAAvB,QAAyC,UAAzC;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,oBAAKF,WAAL,CADc;AAEnBG,EAAAA,QAAQ,oBAAKH,WAAL;AAFW,CAArB;AAKA,IAAMI,QAAQ,GAAGL,aAAa,CAACF,SAAD,CAA9B;AACA,IAAMQ,WAAW,GAAGN,aAAa,CAACD,YAAD,CAAjC;AAEA,IAAMI,KAAK,GAAGN,aAAa,mBAEpBQ,QAFoB,MAGpBC,WAHoB,GAKzBJ,YALyB,CAA3B;AAQA,eAAeC,KAAf","sourcesContent":["import { handleActions } from 'redux-actions';\n\nimport { GET_POSTS, GET_COMMENTS } from '../../types';\nimport {createReducer, baseReducer} from '../utils';\n\nconst initialState = {\n  posts:{...baseReducer},\n  comments:{...baseReducer}\n};\n\nconst getPosts = createReducer(GET_POSTS);\nconst getComments = createReducer(GET_COMMENTS);\n\nconst posts = handleActions(\n  {\n    ...getPosts,\n    ...getComments\n  },\n  initialState,\n);\n\nexport default posts;\n"]},"metadata":{},"sourceType":"module"}