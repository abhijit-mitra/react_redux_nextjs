{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Router, { useRouter } from 'next/router';\nimport { useState, useEffect } from 'react';\nvar initialState = {\n  data: null,\n  error: null,\n  isFetching: false\n};\n\nvar getComments = function getComments(state, setState) {\n  var data;\n  return _regeneratorRuntime.async(function getComments$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(getData());\n\n        case 2:\n          data = _context.sent;\n          setState(_objectSpread({}, state, {\n            isFetching: false,\n            data: data\n          }));\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport var Comments = function Comments() {\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useState = useState(initialState),\n      state = _useState[0],\n      setState = _useState[1];\n\n  useEffect(function () {\n    setState(_objectSpread({}, state, {\n      isFetching: true\n    }));\n    getComments(state, setState);\n  }, []);\n  return __jsx(\"div\", null, state.isFetching ? __jsx(\"h1\", null, \"Loading...\") : (state.data && state.data.comments || []).map(function (data, i) {\n    return __jsx(\"h2\", {\n      key: i,\n      onClick: function onClick() {\n        return Router.push('/posts/[postId]/comments/[commentId]', \"/posts/\".concat(query.postId, \"/comments/\").concat(i + 1));\n      }\n    }, data);\n  }));\n};\n\nvar getData = function getData() {\n  return new _Promise(function (resolve, reject) {\n    var data = {\n      comments: ['Hi', 'Hello', 'How r you?']\n    };\n    setTimeout(function () {\n      resolve(data);\n    }, 5000);\n  });\n};\n\nexport default Comments;","map":null,"metadata":{},"sourceType":"module"}