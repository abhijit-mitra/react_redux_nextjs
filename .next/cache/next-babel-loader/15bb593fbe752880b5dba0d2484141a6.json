{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"/Users/abhijit/Documents/Projects/React/ssr_next_js/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { memo, useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { getPosts } from '../redux/actions';\nvar Index = memo(function (props) {\n  useEffect(function () {\n    props.getPosts();\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, props.isFetching ? '...Loading' : props.data && props.data.size));\n}); // Index.getInitialProps = async function(ctx) {\n//   if(ctx.isServer){\n//       let res = await fetch('https://api.github.com/repos/zeit/next.js');\n//       res = await res.json();\n//       ctx.store.dispatch({type:`get_posts_success`, payload: res});\n//   }\n// };\n\nIndex.getInitialProps = function _callee(ctx) {\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!ctx.isServer) {\n            _context.next = 3;\n            break;\n          }\n\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(ctx.store.dispatch(getPosts()));\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    post: state.post\n  };\n};\n\nexport default connect(function (state) {\n  return state.posts;\n}, {\n  getPosts: getPosts\n})(Index);","map":{"version":3,"sources":["/Users/abhijit/Documents/Projects/React/ssr_next_js/pages/index.js"],"names":["memo","useEffect","useState","connect","getPosts","Index","props","isFetching","data","size","getInitialProps","ctx","isServer","store","dispatch","mapStateToProps","state","post","posts"],"mappings":";;;;AAAA,SAAQA,IAAR,EAAcC,SAAd,EAAyBC,QAAzB,QAAwC,OAAxC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAAQC,QAAR,QAAuB,kBAAvB;AAEA,IAAMC,KAAK,GAAGL,IAAI,CAAC,UAACM,KAAD,EAAW;AAC5BL,EAAAA,SAAS,CAAC,YAAI;AACZK,IAAAA,KAAK,CAACF,QAAN;AACD,GAFQ,EAEP,EAFO,CAAT;AAGA,SACE,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKE,KAAK,CAACC,UAAN,GAAiB,YAAjB,GAA8BD,KAAK,CAACE,IAAN,IAAaF,KAAK,CAACE,IAAN,CAAWC,IAA3D,CADF,CADF;AAMD,CAViB,CAAlB,C,CAYA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAJ,KAAK,CAACK,eAAN,GAAwB,iBAAeC,GAAf;AAAA;AAAA;AAAA;AAAA;AAAA,eACnBA,GAAG,CAACC,QADe;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAEZD,GAAG,CAACE,KAAJ,CAAUC,QAAV,CAAmBV,QAAQ,EAA3B,CAFY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;;AAMA,IAAMW,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD;AAAA,SAAW;AACjCC,IAAAA,IAAI,EAACD,KAAK,CAACC;AADsB,GAAX;AAAA,CAAxB;;AAIA,eAAed,OAAO,CAAC,UAAAa,KAAK;AAAA,SAAEA,KAAK,CAACE,KAAR;AAAA,CAAN,EAAoB;AAACd,EAAAA,QAAQ,EAARA;AAAD,CAApB,CAAP,CAAuCC,KAAvC,CAAf","sourcesContent":["import {memo, useEffect, useState} from 'react';\nimport { connect } from 'react-redux';\n\nimport {getPosts} from '../redux/actions';\n\nconst Index = memo((props) => {\n  useEffect(()=>{\n    props.getPosts();\n  },[])\n  return(\n    <>\n      <h1>{props.isFetching?'...Loading':props.data&& props.data.size}</h1>\n\n    </>\n  );\n});\n\n// Index.getInitialProps = async function(ctx) {\n//   if(ctx.isServer){\n//       let res = await fetch('https://api.github.com/repos/zeit/next.js');\n//       res = await res.json();\n//       ctx.store.dispatch({type:`get_posts_success`, payload: res});\n//   }\n// };\n\nIndex.getInitialProps = async function(ctx) {\n  if(ctx.isServer){\n      await ctx.store.dispatch(getPosts());\n  }\n};\n\nconst mapStateToProps = (state) =>({\n  post:state.post\n})\n\nexport default connect(state=>state.posts,{getPosts})(Index);\n"]},"metadata":{},"sourceType":"module"}