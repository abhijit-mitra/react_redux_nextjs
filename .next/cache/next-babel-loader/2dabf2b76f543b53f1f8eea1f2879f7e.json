{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport reducers from './reducers';\nexport var initStore = function initStore() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return createStore(reducer, initialState, applyMiddleware(thunk));\n};\nvar isDev = true;\n\nvar _ref = isDev ? require('redux-devtools-extension') : require('redux-devtools-extension/logOnlyInProduction'),\n    composeWithDevTools = _ref.composeWithDevTools;\n\nexport default (function () {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var middlewares = isDev ? [thunk, createLogger()] : [thunk];\n  return createStore(reducers, initialState, composeWithDevTools(applyMiddleware.apply(void 0, middlewares)));\n});","map":{"version":3,"sources":["/Users/abhijit/Documents/Projects/React/ssr_next_js/redux/index.js"],"names":["createStore","applyMiddleware","thunk","createLogger","reducers","initStore","initialState","reducer","isDev","require","composeWithDevTools","middlewares"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,OAAOC,QAAP,MAAqB,YAArB;AAGA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAuB;AAAA,MAAtBC,YAAsB,uEAAP,EAAO;AAC9C,SAAON,WAAW,CAACO,OAAD,EAAUD,YAAV,EAAwBL,eAAe,CAACC,KAAD,CAAvC,CAAlB;AACD,CAFM;AAIP,IAAMM,KAAK,OAAX;;WAEgCA,KAAK,GAAGC,OAAO,CAAC,0BAAD,CAAV,GAAyCA,OAAO,CAAC,8CAAD,C;IAA7EC,mB,QAAAA,mB;;AAGR,gBAAe,YAAqB;AAAA,MAApBJ,YAAoB,uEAAP,EAAO;AAClC,MAAMK,WAAW,GAAGH,KAAK,GAAG,CAACN,KAAD,EAAQC,YAAY,EAApB,CAAH,GAA6B,CAACD,KAAD,CAAtD;AACA,SAAOF,WAAW,CAACI,QAAD,EAAWE,YAAX,EAAyBI,mBAAmB,CAACT,eAAe,MAAf,SAAmBU,WAAnB,CAAD,CAA5C,CAAlB;AACD,CAHD","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport reducers from './reducers';\n\n\nexport const initStore = (initialState = {}) => {\n  return createStore(reducer, initialState, applyMiddleware(thunk));\n};\n\nconst isDev = process.env.NODE_ENV !== 'production';\n\nconst { composeWithDevTools } = isDev ? require('redux-devtools-extension') : require('redux-devtools-extension/logOnlyInProduction');\n\n\nexport default (initialState={}) => {\n  const middlewares = isDev ? [thunk, createLogger()] : [thunk];\n  return createStore(reducers, initialState, composeWithDevTools(applyMiddleware(...middlewares)));\n};\n"]},"metadata":{},"sourceType":"module"}