{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/abhijit/Documents/Projects/React/ssr_next_js/pages/posts/[postId]/comments/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Router, { useRouter } from 'next/router';\nimport { useState, useEffect } from 'react';\nvar initialState = {\n  data: null,\n  error: null,\n  isFetching: false\n};\nexport var Comments = function Comments() {\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useState = useState(initialState),\n      state = _useState[0],\n      setState = _useState[1];\n\n  useEffect(function _callee() {\n    var data;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setState(_objectSpread({}, state, {\n              isFetching: true\n            }));\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(getData());\n\n          case 3:\n            data = _context.sent;\n            setState(_objectSpread({}, state, {\n              isFetching: false,\n              data: data\n            }));\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  }, []);\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, state.isFetching ? __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, \"Loading...\") : (state.data && state.data.comments || []).map(function (data, i) {\n    return __jsx(\"h2\", {\n      key: i,\n      onClick: function onClick() {\n        return Router.push('/posts/[postId]/comments/[commentId]', \"/posts/\".concat(query.postId, \"/comments/\").concat(i + 1));\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, data);\n  }));\n};\n\nvar getData = function getData() {\n  return new _Promise(function (resolve, reject) {\n    var data = {\n      comments: ['Hi', 'Hello', 'How r you?']\n    };\n    setTimeout(function () {\n      resolve(data);\n    }, 5000);\n  });\n};\n\nexport default Comments;","map":{"version":3,"sources":["/Users/abhijit/Documents/Projects/React/ssr_next_js/pages/posts/[postId]/comments/index.js"],"names":["Router","useRouter","useState","useEffect","initialState","data","error","isFetching","Comments","query","state","setState","getData","comments","map","i","push","postId","resolve","reject","setTimeout"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,MAAP,IAAiBC,SAAjB,QAAmC,aAAnC;AACA,SAAQC,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AAEA,IAAMC,YAAY,GAAC;AACjBC,EAAAA,IAAI,EAAC,IADY;AAEjBC,EAAAA,KAAK,EAAC,IAFW;AAGjBC,EAAAA,UAAU,EAAE;AAHK,CAAnB;AAMA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAK;AAAA,mBACXP,SAAS,EADE;AAAA,MACpBQ,KADoB,cACpBA,KADoB;;AAAA,kBAEDP,QAAQ,CAACE,YAAD,CAFP;AAAA,MAEpBM,KAFoB;AAAA,MAEbC,QAFa;;AAI3BR,EAAAA,SAAS,CAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AACPQ,YAAAA,QAAQ,mBACHD,KADG;AAENH,cAAAA,UAAU,EAAC;AAFL,eAAR;AADO;AAAA,6CAKYK,OAAO,EALnB;;AAAA;AAKDP,YAAAA,IALC;AAMPM,YAAAA,QAAQ,mBACHD,KADG;AAENH,cAAAA,UAAU,EAAE,KAFN;AAGNF,cAAAA,IAAI,EAAJA;AAHM,eAAR;;AANO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAF,EAWP,EAXO,CAAT;AAaA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGK,KAAK,CAACH,UAAN,GACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADD,GAEC,CAAEG,KAAK,CAACL,IAAN,IAAcK,KAAK,CAACL,IAAN,CAAWQ,QAA1B,IAAuC,EAAxC,EAA4CC,GAA5C,CAAgD,UAACT,IAAD,EAAOU,CAAP;AAAA,WAC9C;AAAI,MAAA,GAAG,EAAEA,CAAT;AAAY,MAAA,OAAO,EAAE;AAAA,eAAIf,MAAM,CAACgB,IAAP,CAAY,sCAAZ,mBACfP,KAAK,CAACQ,MADS,uBACUF,CAAC,GAAC,CADZ,EAAJ;AAAA,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEGV,IAFH,CAD8C;AAAA,GAAhD,CAHJ,CADF;AAYD,CA7BM;;AA+BP,IAAMO,OAAO,GAAG,SAAVA,OAAU;AAAA,SAAM,aAAY,UAACM,OAAD,EAAUC,MAAV,EAAmB;AACnD,QAAMd,IAAI,GAAG;AAACQ,MAAAA,QAAQ,EAAC,CAAC,IAAD,EAAM,OAAN,EAAc,YAAd;AAAV,KAAb;AACAO,IAAAA,UAAU,CAAC,YAAI;AACbF,MAAAA,OAAO,CAACb,IAAD,CAAP;AACD,KAFS,EAEP,IAFO,CAAV;AAGD,GALqB,CAAN;AAAA,CAAhB;;AAOA,eAAeG,QAAf","sourcesContent":["import Router, { useRouter }  from 'next/router';\nimport {useState, useEffect} from 'react';\n\nconst initialState={\n  data:null,\n  error:null,\n  isFetching: false\n}\n\nexport const Comments = () =>{\n  const {query} = useRouter();\n  const [state, setState] = useState(initialState);\n\n  useEffect( async()=>{\n      setState({\n        ...state,\n        isFetching:true\n      })\n      const data = await getData();\n      setState({\n        ...state,\n        isFetching: false,\n        data\n      })\n  },[]);\n\n  return(\n    <div>\n      {state.isFetching?\n        <h1>Loading...</h1>:\n        ((state.data && state.data.comments) || []).map((data, i)=>(\n          <h2 key={i} onClick={()=>Router.push('/posts/[postId]/comments/[commentId]',\n          `/posts/${query.postId}/comments/${i+1}`)}>\n            {data}\n          </h2>))\n      }\n    </div>\n  )\n}\n\nconst getData = () => new Promise((resolve, reject)=>{\n  const data = {comments:['Hi','Hello','How r you?']};\n  setTimeout(()=>{\n    resolve(data);\n  }, 5000);\n});\n\nexport default Comments;\n"]},"metadata":{},"sourceType":"module"}