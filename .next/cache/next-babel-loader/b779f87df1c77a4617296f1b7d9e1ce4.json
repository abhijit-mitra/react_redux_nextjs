{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport fetch from 'isomorphic-unfetch';\nimport { GET_COMMENTS } from '../../types';\nexport var getComments = function getComments() {\n  return function (dispatch, getState) {\n    var state = getState();\n\n    if (state.comments.data) {\n      return;\n    }\n\n    var callApi = function callApi() {\n      var res;\n      return _regeneratorRuntime.async(function callApi$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(fetch('https://api.github.com/repos/zeit/next.js'));\n\n            case 3:\n              res = _context.sent;\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(res.json());\n\n            case 6:\n              res = _context.sent;\n              dispatch({\n                type: \"\".concat(GET_COMMENTS, \"_success\"),\n                payload: res\n              });\n              _context.next = 13;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](0);\n              dispatch({\n                type: \"\".concat(GET_COMMENTS, \"_failed\"),\n                payload: _context.t0\n              });\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 10]]);\n    };\n\n    dispatch({\n      type: \"\".concat(GET_COMMENTS, \"_started\")\n    });\n    return _Promise.resolve(callApi());\n  };\n};","map":null,"metadata":{},"sourceType":"module"}